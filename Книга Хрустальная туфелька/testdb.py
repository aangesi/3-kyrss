import re
from chromadb import PersistentClient
from chromadb.utils import embedding_functions

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ChromaDB ===
embedding_fn = embedding_functions.DefaultEmbeddingFunction()
client = PersistentClient(path="./chroma_storage")
collection_name = "khrustalnaia_tufelka"

collection = client.get_or_create_collection(
    name=collection_name,
    embedding_function=embedding_fn
)

# === –§—É–Ω–∫—Ü–∏–∏ ===
def split_into_sentences(text: str):
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
    """
    sentences = re.split(r'(?<=[.!?])\s+', text)
    return [s.strip() for s in sentences if s.strip()]

def get_three_sentences_with_query(text: str, query: str):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –≥–¥–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑–∞.
    """
    sentences = split_into_sentences(text)
    query_lower = query.lower()
    found = [s for s in sentences if query_lower in s.lower()]
    return found[:3] if found else None

def search_top3_sentences(query: str):
    """
    –ü–æ–∏—Å–∫ —Ç—Ä—ë—Ö –ª—É—á—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∑–∞–ø—Ä–æ—Å–æ–º
    –∏ –≤—ã–≤–æ–¥ –¥–æ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–∑ –∫–∞–∂–¥–æ–≥–æ.
    """
    try:
        if collection.count() == 0:
            print(f"‚ö†Ô∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è '{collection_name}' –ø—É—Å—Ç–∞.")
            return

        results = collection.query(
            query_texts=[query],
            n_results=3,  # –±–µ—Ä—ë–º —Ç—Ä–∏ –ª—É—á—à–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            include=['documents', 'distances']
        )

        documents = results.get("documents", [[]])[0]
        distances = results.get("distances", [[]])[0]

        if not documents:
            print("\n‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        print(f"\nüìñ –¢–æ–ø-3 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É: ¬´{query}¬ª")

        for i, doc in enumerate(documents):
            similarity = (1 - distances[i]) * 100
            found_sentences = get_three_sentences_with_query(doc, query)

            print(f"\nüîπ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ {i+1} (–ø–æ—Ö–æ–∂–µ—Å—Ç—å: {similarity:.2f}%)")

            if found_sentences:
                for sent in found_sentences:
                    print(f"- {sent}")
            else:
                # –µ—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                sentences = split_into_sentences(doc)
                for sent in sentences[:3]:
                    print(f"- {sent}")

    except Exception as e:
        print(f"\n[!] –û—à–∏–±–∫–∞: {e}")

# === –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã ===
if __name__ == "__main__":
    print(f"\nüìö –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: '{collection_name}'")
    try:
        user_query = input("üîç –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É: ").strip()
        if user_query:
            search_top3_sentences(user_query)
        else:
            print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.")
    except KeyboardInterrupt:
        print("\n‚ùå –ü–æ–∏—Å–∫ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
